// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id        String      @id @default(uuid())
  name      String
  billboard Billboard[] @relation("StoreToBillboard")
  category  Category[]  @relation("StoreToCategory")
  products  Product[]   @relation("storeToProduct")
  orders    Order[]     @relation("storeToOrder")
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Billboard {
  id        String     @id @default(uuid())
  storeId   String
  store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[] @relation("BillboardToCategory")

  @@index([storeId]) // warning fix
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products    Product[] @relation("categoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id         String      @id @default(uuid())
  name       String
  price      Decimal
  image      String
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  storeId    String
  store      Store       @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("categoryToProduct", fields: [categoryId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[] @relation("orderToProduct")

  @@index([storeId])
  @@index([categoryId])
}

model Order {
  id        String      @id @default(uuid())
  storeId   String
  store     Store       @relation("storeToOrder", fields: [storeId], references: [id])
  orderItem OrderItem[] @relation("orderItemToOrder")
  isPaid    Boolean     @default(false)
  phone     String      @default("")
  address   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation("orderItemToOrder", fields: [orderId], references: [id])
  productId String
  product   Product @relation("orderToProduct", fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
